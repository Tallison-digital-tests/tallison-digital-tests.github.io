<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <title>Digital Tests • CSAT & Always-On</title>
  <style>
    :root { --bg:#50d9ff; --ink:#0c1b1e; --btn:#222; --btnH:#111; --ghost:#ffffff; }
    * { box-sizing: border-box; font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; }
    body {
      margin: 0; min-height: 100vh; display: grid; place-items: center;
      background: var(--bg); color: var(--ink); padding: 24px;
    }
    .wrap { width: min(920px, 100%); display: grid; gap: 16px; }
    h1 { margin: 0 0 4px; font-size: 22px; }
    p  { margin: 0 0 8px; opacity: .8; }
    .row { display: flex; flex-wrap: wrap; gap: 10px; }
    button {
      border: 0; border-radius: 10px; padding: 10px 14px; cursor: pointer;
      background: var(--btn); color: #fff; font-weight: 600;
      transition: transform .04s ease, background .2s ease;
    }
    button:hover { background: var(--btnH); transform: translateY(-1px); }
    button:disabled { opacity: .5; cursor: not-allowed; transform: none; }
    .ghost { background: transparent; color: var(--ink); border: 2px solid var(--ink); }
    #feedbackButton { display: none; }
    .chip { display:inline-block; padding:.25rem .5rem; border-radius:999px; background:#00000014; font-size:12px; }
    .card {
      background: rgba(255,255,255,.35); border: 1px solid rgba(0,0,0,.08);
      border-radius: 16px; padding: 16px; backdrop-filter: blur(6px);
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>Disparos de Pesquisa (CSAT & Always-On)</h1>
      <p>
        URL base: <span class="chip">https://tallison-digital-tests.github.io/cprssurvey</span><br/>
        Escolha um cenário abaixo. Para CSAT, o script seta <code>prs_tab</code> e <code>prs_event</code> na URL,
        força reavaliação do SDK e, se houver form disponível, habilita o botão “Share Your Feedback”.
      </p>
      <div class="row" style="margin-top:10px">
        <!-- CSAT Scenarios (URL + var) -->
        <button class="ghost" data-scenario="policy_documents">CSAT — Policy Documents</button>
        <button class="ghost" data-scenario="billing_activity">CSAT — Billing Activity</button>
        <button class="ghost" data-scenario="assessment">CSAT — Assessment PDF</button>

        <!-- Always-On (abre direto por ID) -->
        <button id="alwaysOnBtn">Always-On (abrir form)</button>

        <!-- Botão de exibição do form (fica visível quando loadForm==true) -->
        <button id="feedbackButton">Share Your Feedback</button>
      </div>
    </div>
  </div>

  <!-- Medallia Digital embed -->
  <script type="text/javascript" src="https://resources.digital-cloud.medallia.eu/wdceu/217080/onsite/embed.js" async></script>

  <script>
    /***********************
     * CONFIGURE AQUI
     ***********************/
    // IDs de formulário (preencha com os reais):
    const FORM_IDS = {
      alwaysOn:  25315,     // exemplo
      policy_documents:  11111, // <-- troque pelo ID real do CSAT "Policy Documents"
      billing_activity:  22222, // <-- troque pelo ID real do CSAT "Billing Activity"
      assessment:        33333  // <-- troque pelo ID real do CSAT "Assessment PDF"
    };

    // Se quiser abrir automaticamente o form CSAT quando disponível:
    const AUTO_SHOW_WHEN_AVAILABLE = false;

    // Mapeia cada cenário CSAT → par (prs_tab, prs_event)
    const SCENARIO_MAP = {
      policy_documents: { prs_tab: 'policy_documents', prs_event: 'tab_exit'   },
      billing_activity: { prs_tab: 'billing_activity', prs_event: 'tab_exit'   },
      assessment:       { prs_tab: 'assessment',       prs_event: 'pdf_close'  }
    };

    /***********************
     * UTILIDADES
     ***********************/
    const $ = (sel) => document.querySelector(sel);

    function setUrlParams(params){
      const url = new URL(window.location.href);
      Object.entries(params).forEach(([k,v]) => url.searchParams.set(k, v));
      // mantém na MESMA origem/rota; só troca os parâmetros
      history.pushState({}, '', url.toString());
    }

    function tryUpdatePageView(){
      if (window.KAMPYLE_ONSITE_SDK && typeof KAMPYLE_ONSITE_SDK.updatePageView === 'function') {
        try { KAMPYLE_ONSITE_SDK.updatePageView(); } catch(e){ console.warn('updatePageView falhou:', e); }
      }
    }

    function loadAndWireForm(formId){
      if (!window.KAMPYLE_ONSITE_SDK) return false;
      let available = false;
      try {
        available = KAMPYLE_ONSITE_SDK.loadForm(formId) === true;
      } catch(e){ console.warn('loadForm erro:', e); }
      const btn = $('#feedbackButton');
      if (available) {
        btn.onclick = () => KAMPYLE_ONSITE_SDK.showForm(formId);
        btn.style.display = 'inline-block';
        if (AUTO_SHOW_WHEN_AVAILABLE) KAMPYLE_ONSITE_SDK.showForm(formId);
      } else {
        btn.style.display = 'none';
        btn.onclick = null;
      }
      return available;
    }

    function activateScenario(scnKey){
      const pair = SCENARIO_MAP[scnKey];
      const formId = FORM_IDS[scnKey];
      if (!pair || !formId) {
        console.warn(`Cenário "${scnKey}" sem mapeamento ou FORM_ID.`);
        return;
      }
      // 1) Atualiza URL com as variáveis exigidas
      setUrlParams(pair);
      // 2) Força o SDK a reavaliar as regras (CSAT direcionado)
      tryUpdatePageView();
      // 3) Tenta carregar o form específico; se disponível, habilita o botão de abrir
      loadAndWireForm(formId);
    }

    /***********************
     * BOOT
     ***********************/
    const alwaysOnBtn = $('#alwaysOnBtn');
    alwaysOnBtn.addEventListener('click', () => {
      // Always-On: abre direto
      loadAndWireForm(FORM_IDS.alwaysOn);
      if (window.KAMPYLE_ONSITE_SDK) KAMPYLE_ONSITE_SDK.showForm(FORM_IDS.alwaysOn);
    });

    // Botões de cenário CSAT
    document.querySelectorAll('button[data-scenario]').forEach(btn => {
      btn.addEventListener('click', () => activateScenario(btn.dataset.scenario));
    });

    // Quando o SDK carregar pela primeira vez
    function onOnsiteLoaded(){
      // Se a URL já vier com prs_tab/prs_event, tenta detectar e carregar o form correspondente
      const params = new URL(window.location.href).searchParams;
      const prs_tab   = params.get('prs_tab');
      const prs_event = params.get('prs_event');

      if (prs_tab && prs_event) {
        // Acha a chave do cenário pelo par atual
        const scnKey = Object.keys(SCENARIO_MAP).find(k => {
          const v = SCENARIO_MAP[k];
          return v.prs_tab === prs_tab && v.prs_event === prs_event;
        });
        if (scnKey) activateScenario(scnKey);
      } else {
        // Sem params? Só prepara o Always-On button (opcional)
        loadAndWireForm(FORM_IDS.alwaysOn);
      }
    }

    if (window.KAMPYLE_ONSITE_SDK) {
      onOnsiteLoaded();
    } else {
      window.addEventListener('neb_OnsiteLoaded', onOnsiteLoaded);
    }
  </script>
</body>
</html>
